climate_chage <- climate_change_data%>%
select(year,methane)
methane_plot <- ggplot(climate_chage)%>%
geom_col(mapping = aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
})
climate_change_data <- read.csv("DataSet/owid-co2-data.csv")
server <- function(input,output){
output$methane_plot <- renderPlot({
plot_data <- climate_change_data
climate_chage <- climate_change_data%>%
select(year,methane)
methane_plot <- ggplot(climate_chage)%>%
geom_col(mapping = aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
})
}
ggplot(climate_chage)%>%
geom_col(mapping = aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
climate_change_data <- read.csv("DataSet/owid-co2-data.csv")
View(climate_change_data)
runApp()
shiny::runApp()
library(RColorBrewer)
display.brewer.all()
climate_change_data <- read.csv("DataSet/owid-co2-data.csv")
server <- function(input,output){
output$methane_plot <- renderPlot({
plot_data <- climate_change_data
climate_chage <- climate_change_data %>%
select(year,methane)
methane_plot <- ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
methane_plot
})
output$nitrous_oxide_plot <- renderPlot({
filter <- climate_change_data %>%
select(year, nitrous_oxide)
nitrous_oxide_plot <- ggplot(filter) +
geom_col(aes(x = year, y = nitrous_oxide, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
nitrous_oxide_plot
})
runApp()
runApp()
runApp()
climate_change_data %>%
select(year,methane)
methane_plot <- ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
climate_chage <- climate_change_data %>%
select(year,methane)
methane_plot <- ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
runApp()
filter <- climate_change_data %>%
select(year, nitrous_oxide)
nitrous_oxide_plot <- ggplot(filter) +
geom_col(aes(x = year, y = nitrous_oxide, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
ggplot(filter) +
geom_col(aes(x = year, y = nitrous_oxide, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
runApp()
output$energy_per_capita_plot <- renderPlot({
filter <- climate_change_data %>%
select(year, energy_per_capita)
energy_per_capita_plot <- ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
runApp()
runApp()
filter <- climate_change_data %>%
select(year, energy_per_capita)
energy_per_capita_plot <- ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(plot_data)
runApp()
location_most_deaths <- counties %>%
filter(deaths == max(deaths, na.rm = T)) %>%
pull(location)
location_most_deaths
location_most_deaths <- counties %>%
filter(deaths = max(deaths, na.rm = T)) %>%
pull(location)
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct))%>%
pull(country)
read <- read.csv("DataSet/owid-co2-data.csv")
libray(tidyverse)
library(dplyr)
library(pscl)
library(tidyverse)
library(styler)
library(lintr)
library(stringr)
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct))%>%
pull(country)
gas
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct, na.rm =  T))%>%
pull(country)
gas
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct))%>%
pull(country, na.rm =  T)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
read <- read.csv("data/NFLsavant_playbyplay_2020")
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
read <- read.csv("data/NFLsavant_playbyplay_2020")
library(dplyr)
library(pscl)
library(tidyverse)
library(styler)
library(lintr)
library(stringr)
library(RColorBrewer)
library(maps)
library(mapproj)
library(patchwork)
library(ggplot2)
library(RColorBrewer)
display.brewer.all()
nfl_dataset1 <- read.csv("data/NFLsavant_playbyplay_2020.csv")
features <- nrow(nfl_dataset1)
filter <- nfl_dataset1%>%
group_by(PenaltyYards)%>%
filter(PenaltyYards == min(PenaltyYards, na.rm = T))%>%
pull(PenaltyType)
##nfl_wins <- nfl_dataset2 %>%
## select(PlayType, IsInterception)
##nfl_second_plot <-
##  ggplot(nfl_wins) +
##  geom_scatt(aes (x = PlayType, y = IsInterception, fill = IsInterception)) + scale_fill_distiller(palette = "Accent") +
## labs(x = "Playtype", y = "Interceptions", title = "NFl DatSet By Abdiwahid, Evan, Charles")
##
## Filter by interceptions and passtype and sum that all up
nfl_data_abdiwahid <- nfl_dataset1 %>%
group_by(PassType)%>%
summarise(interception = sum(IsInterception, na.rm =  T))%>%
filter(interception != 0)
## @ABdiwahid - create a ggplot of the pass types and their interception rating
abdiwahid_plot <- ggplot(nfl_data_abdiwahid) +
geom_col(mapping = aes (x = PassType, y = interception))  +
coord_flip()+
labs(x = "PassType", y = "interception", title = "Types of pass and the probabililty of it getting
intercepted")
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank() # remove border around plot
)
read <- read.csv("data/NFLsavant_playbyplay_2020.csv")
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
read <- read.csv("data/NFLsavant_playbyplay_2020.csv")
read <- read.csv("data/NFLsavant_playbyplay_2020.csv")
read
runApp()
runApp()
runApp()
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
runApp()
runApp()
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
setwd("~/")
runApp('C:/Users/abdiw/Desktop/info_201/project-evanbod/App')
first_ten <- (10:20)
first_ten
next_ten <- seq(21:30)
next_ten
allnumber <- (first_ten, next_ten)
allnumber <- lapply(first_ten, first_ten)
print("Hello world")
num_1 <- 4
num_2 <- 5
num_1 / (201^0.5)
num_1 / (sqrt(201))
num_1 <- 4
num_2 <- 48
num_3 <- num_1/(201^0.5)
num_3
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric, 0, 13)
fruits <- substr(lyric, 15, 32)
fruits_e <- gsub("a", "ee", fruits, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
fruits_e
# Overview ----------------------------------------------------------------
# Assignment 1: Analysis of the protest data from Crowd Love
# For each question/prompt, write the necessary code to calculate the answer.
# For grading, it's important that you store your answers in the variable names
# listed with each question in `backtics`.
# For each prompt marked `Reflection`, please write a response
# in your `README.md` file.
# Part 1:Set up -----------------------------------------------------------
# In this section, you're loading the data and necessary packages.
# Load the `stringr` package, which you'll use later.
library(stringr)
# Load the data from https://countlove.org/data/data.csv
# into a variable called `protests`
protests <- read.csv("https://countlove.org/data/data.csv", stringsAsFactors = FALSE)
# How many protests are in the dataset? `num_protests`
num_protests <- nrow(protests)
# How much information is available about each protest? `num_features`
num_features <- ncol(protests)
# Part 2: Attendees -------------------------------------------------------
# In this section, you're exploring the number of attendees.
# Extract the `Attendees` column into a variable called `num_attendees`
num_attendes <- protests$Attendees
# What is the lowest number of attendees? `min_attendees`
# (hint for this and other calculations: you'll need to consider missing values)
min_attendees <- min(num_attendes, na.rm = TRUE)
# What is the highest number of attendees? `max_attendees`
max_attendees <- max(num_attendes, na.rm = TRUE)
# What is the mean number of attendees? `mean_attendees`
mean_attendees <- mean(num_attendes, na.rm = TRUE)
# What is the median number of attendees? `median_attendees`
median_attendees <- median(num_attendes, na.rm = TRUE)
# What is the difference between the mean and median number of attendees?
# `mean_median_diff`
mean_median_diff <- diff(mean_attendees, median_attendees, na.rm = TRUE)
# Reflection: What does the difference between the mean and the median
# tell you about the *distribution* of the data? (if you're unfamiliar with
# working with distibutions, feel free to ask your TA for clarification)
# To further assess the distribution of values, create a boxplot of the number
# of attendees using the `boxplot()` function.
# Store the plot in a variable called `attendess_distribution`
# (Note, we'll use much more refined plotting methods, and pay far
# more attention to detail later in the course)
attendess_distribution <- boxplot(protests$Attendees)
# Create another boxplot of the *log* of the number of attendees.
# Store the plot in a variable `log_attendees_distribution`.
# (note, you will see a warning in the console, which is expected)
log_attendees_distribution <- boxplot(log(protests$Attendees))
# Part 3: Locations -------------------------------------------------------
# In this section, you're exploring where protests happened.
# Extract the `Location` column into a variable called `locations`
locations <- protests$Location
# How many *unique* locations are in the dataset? `num_locations`
num_locations <- length(unique(locations))
# How many protests occured in Washington? `num_in_wa`
# (hint: use a function from the stringr package to detect the letters "WA")
num_in_wa <- sum(str_count(locations, "WA"))
# What proportion of protests occured in Washington? `prop_in_wa`
prop_in_wa <- num_in_wa / num_protests
# Reflection: Does the number of protests in Washington surprise you?
# Why or why not?
# Write a function `count_in_location()` that accepts (as a parameter)
# a `location` name, and returns the sentence (note: spacing and punctuation):
# "There were N protests in LOCATION.", where N is the number of
# protests that occured in that location, and LOCATION is the parameter that
# was provided into the function.
# Note, you should count the number of locations that *match* the parameter
# put into the function, so `Seattle` should be a match for "Seattle, WA"
## Solution 1
count_in_location <- function(INPUT){
get_number <- sum(str_count(locations, pattern = INPUT))
paste0("There were", " ", get_number, " ", "protests in", " ", INPUT)
}
## Solution 2
in_location <- function(location) {
num_protestss <- sum(str_detect(locations, location))
paste0("There were", " ", num_protestss, " ", "protests", " ", "in", " ", location, ".")
}
##Solution 3 not needed
count_in_location <- function(location) {
num_protestss <- sum(str_detect(locations, location))
if(num_protestss == 1){
paste0("There was only", " ", num_protestss, " ", "protest", " ", "in", " ", location, ".")
}else{
paste0("There was only", " ", num_protestss, " ", "protest", " ", "in", " ", location, ".")
}
}
# Use your function above to describe the number of protests in "Washington, DC"
# `dc_summary`
dc_summary <- count_in_location("Washington, DC")
# Use your function above to describe the number of protests in "Minneapolis"
# `minneapolis_summary`
minneapolis_summary <- count_in_location("Minneapolis")
# Create a new vector `states` which is the last two characters of each
# value in the `locations` vector. Hint, you may want to again use the
# `stringr` package
states <- c(str_sub(locations, -2))
# Create a vector of the unique states in your dataset. `uniq_states`
uniq_states <- c(unique(states))
# Create a summary sentence for each state by passing your `uniq_states`
# variable and `count_in_location` variables to the `sapply()` function.
# Store your results in `state_summary`
# (don't miss how amazing this is! Very powerful to apply your function to an
# entire vector *at once* with `sapply()`)
state_summary <- sapply(uniq_states, count_in_location)
# Create a summary table by passing your `states` variable to the `table()`
# funciton, and storing the result in a variable `state_table`.
state_table <- table(states)
# Optional: use the View() function to more easily read the table
# Reflection: Looking at the `state_table` variable, what data quality issues
# do you notice, and how would you use that to change your analysis (no need
# to actually change your analysis)?
# What was the maximum number of protests in a state? `max_in_state`
# (hint: use your `state_table` variable)
max_in_state <- max(state_table)
# Part 4: Dates -----------------------------------------------------------
# In this section, you're exploring *when* protests happened.
# Extract the `Date` column into a variable called `dates` by passing the
# column to the `as.Date()` function (this will process the values as dates,
# which are *luckily* already in an optimal format for parsing)
dates <- as.Date(protests$Date)
# What is the most recent date in the dataset? `most_recent`
most_recent <- max(dates)
# What is the earliest date in the dataset? `earliest`
earliest <- min(dates)
# What is the length of the timespan of the dataset? `time_span`
# hint: R can do math with dates pretty well by default!
time_span <- most_recent - earliest
# Create a vector of the dates that are in 2020 `in_2020`
in_2020 <- c(dates[dates > as.Date("2019-12-31") & dates < "2021-01-01"])
# Create a vector of the dates that are in 2019. `in_2019`
in_2019 <- c(dates[dates > as.Date("2018-12-31") & dates < "2020-01-01"])
# What is the ratio of the number of protests in 2020 comparted to 2019?
# `ratio_2020_2019`
ratio_2020_2019 <- length(in_2020) / length(in_2019)
# Reflection: Does the change in the number of protests from 2019 to 2020
# surprise you? Why or why not?
# Write a function `count_on_date()` that accecpts as a parameter a `date`,
# and returns the sentence:
# "There were N protests on DATE.", where N is the number of protests on that
# date, and DATE is the date provided
##Solution 1
count_on_date <- function(DATE){
get_number_date <- sum(str_count(dates, pattern = DATE))
paste0("There were", " ", get_number_date, " ", "protests", " ", "on", " ", DATE, ".")
}
##Solution 2
on_date <- function(DATE){
get_number_date <- sum(str_detect(dates, pattern = DATE))
paste0("There were", " ", get_number_date, " ", "protests", " ", "on", " ", DATE, ".")
}
# Using your function you just wrote, how many protests were there on
# May 24th, 2020? `num_may_24`
num_may_24 <- count_on_date("2020-05-24")
num_on_may_24_solution2 <- on_date("2020-05-24")
# Using your function you just wrote, how many protests were there on
# May 31th, 2020? `num_on_may_31`
num_may_31_solution1 <- count_on_date("2020-05-31")
num_on_may_31 <- on_date("2020-05-31")
# For more on this timeline, see:
# https://www.nytimes.com/article/george-floyd-protests-timeline.html
# How many protests occured each month in 2020? `by_month_table`
# Hint: use the `months()` function, your `in_2020` dates, and the `table()`
# Function. If you like, you can do this in multiple different steps.
by_months_table <- months(in_2020)
table(by_months_table)
# As a comparison, let's assess the change between July 2019 and July 2020.
# What is the *difference* in the number of protests between July 2020 and
# July 2019? You'll want to do this in multiple steps as you see fit, though
# your answer should be stored in the variable `change_july_protests`.
##Solution 1
july_2019 <- c(in_2019[in_2019 >= "2019-07-01" & in_2019 <= "2019-07-31"])
july_2020 <- c(in_2020[in_2020 >= "2020-07-01" & in_2020 <= "2020-07-31"])
change_july_protests <- length(july_2020) - length(july_2019)
##--------------------------------------------------------------------------
##Solution 2------------------------------------
july2019 <- length(dates[dates >= "2019-07-01" & dates <= "2019-07-31"])
july2020 <- length(dates[dates >= "2020-07-01" & dates <= "2020-07-31"])
july_protests <- july2020 - july2019
##---------------------------------------------------------
# Reflection: do a bit of research. Find at least *two specific policies* that
# have been changed as a result of protests in 2020. These may be at the
# city, state, or University level. Please provide a basic summary, as well as a
# link to each article.
# Part 5: Protest Purpose -------------------------------------------------
# In this section, you're exploring *why* protests happened
# Extract the `Event..legacy..see.tags.` column into a variable called `purpose`
purpose <- protests$Event..legacy..see.tags.
# How many different purposes are listed in the dataset? `num_purposes`
# That's quite a few -- if you look at -- View() -- the vector, you'll notice
# a common pattern for each purpose. It's listed as:
# SOME_PURPOSE (additiona_detail)
# To get a higher level summary, create a variable `high_level_purpse` by
# extracting *everything before the first parenthesis* in each value
# in the vector. For example, from "Civil Rights (Black Women's March)"
# you would extract "Civil Rights". You'll also have to *remove the space*
# before the first parenthasis.
# Hint: this will take a little bit of googling // trial and error. Be patient!
##First possible solution
high_level_purpose <- c(str_replace_all(string = purpose, pattern = "\\(.....*", ""))
##Second updated and possible solution
high_level_purpose <- gsub("\\(.*", "", purpose)
##---------------------------------------------------------
# How many "high level" purposes have you identified? `num_high_level`
num_high_level <- length(unique(high_level_purpose))
# Create a table that counts the number of protests for each high level purpose
# `high_level_table`
high_level_table <- table(high_level_purpose)
# Reflection: Take a look (`View()`) your `high_level_table` variable. What
# picture does this paint of the U.S.?
# Part 6: Independent Exploration -----------------------------------------
# As a last step, you should write your own function that allows you to
# quickly ask questions of the dataset. For example, in the above sections,
# you wrote functions to ask the same question about different months, or
# locations. If you need any guidance here, feel free to ask!
high_level_purpose <- c(str_replace_all(string = purpose, pattern = "\\(.....*", ""))
View(high_level_purpose)
View(as.data.frame(high_level_purpose))
purpose <- protests$Event..legacy..see.tags.
View(purpose)
purpose
high_level_purpose <- sub(" \\(.*", "", (purpose))
high_level_purpose
high_level_purposae <- c(str_replace_all(string = purpose, pattern = "\\(.....*", ""))
high_level_purposae
(high_levelsss_purpose <- gsub("\\s\\([^()]*\\)", "", purpose))
high_levelsss_purpose
ratio_2020_2019 <- length(in_2020) / length(in_2019)
ratio_2020_2019
(ratio_2020_2019s <- sum(str_count(dates, pattern = "2020")) /
sum(str_count(dates, pattern = "2019")))
View(data.frame(starbucks$Calories))
starbucks <- read.csv("Data/StarbucksData.csv")
setwd("C:/Users/abdiw/Downloads/SectionAA_Lab_Demos/Lab_3_Demos")
starbucks <- read.csv("Data/StarbucksData.csv")
View(data.frame(starbucks$Calories))
