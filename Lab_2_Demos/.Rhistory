+ scale_fill_continuous(limits = c(0, max(map_data$black_jail_pop), na.value = "white",
low = "yellow", high = "red"))
read <- read.csv("owid-co2-data")
setwd("C:/Users/abdiw/Desktop/info_201/a4-Superme-Abdiwahid")
read <- read.csv("owid-co2-data.csv")
read
View(read)
# Libraries
library(shiny)
library(dplyr)
library(ggplot2)
climate_change_data <- read.csv("owid-co2-data.csv")
source("app_ui.R")
source("app_server.R")
shinyApp(ui, server)
shinyApp(ui, server)
page_two <- tabPanel(
titlePanel(""),
sidebarLayout(
sidebarPanel(
h3(""),
selectInput(
inputId = "types of gases",
label = "Climate change gases",
choices = c("methane", "nitrous_oxide",
"energy_per_capita	", ("share_global_coal_co2	")),
),
selectInput(
inputId = "color_var",
label = "Color of Points",
choices = c("darkgray", "blue", "red", "orange",
"green", "brown", "purple")
)
),
mainPanel(
h3("Scatterplot"),
plotOutput(outputId = "plot_data"),
p("")
)
)
)
shiny::runApp()
runApp()
read <- read.csv("owid-co2-data.csv")
runApp()
runApp()
read <- read.csv("owid-co2-data.csv")
setwd("C:/Users/abdiw/Desktop/info_201/a4-Superme-Abdiwahid")
read <- read.csv("owid-co2-data.csv")
read <- read.csv("DataSet/owid-co2-data.csv")
runApp()
runApp()
setwd("C:/Users/abdiw/Desktop/info_201/a4-Superme-Abdiwahid")
runApp()
climate_change_data <- read.csv("owid-co2-data.csv")
climate_change_data <- read.csv("DataSet/owid-co2-data.csv")
climate_change_data
View(climate_change_data)
runApp()
runApp()
climate_chage <- climate_change_data%>%
group_by(methane)
climate_chage <- climate_change_data%>%
group_by(year)%>%
pull(methane)
climate_chage <- climate_change_data%>%
group_by(year)%>%
pull(methane)
methane_plot <- ggplot(climate_chage)%>%
geom_bar(aes(x = year, y = methane))
runApp()
runApp()
plot_data <- climate_change_data
climate_chage <- climate_change_data%>%
select(year,methane)
methane_plot <- ggplot(climate_chage)%>%
geom_col(aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
plot_data <- climate_change_data
climate_chage <- climate_change_data%>%
select(year,methane)
methane_plot <- ggplot(climate_chage)%>%
geom_col(mapping = aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
})
output$methane_plot <- renderPlot({
plot_data <- climate_change_data
climate_chage <- climate_change_data%>%
select(year,methane)
methane_plot <- ggplot(climate_chage)%>%
geom_col(mapping = aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
})
climate_change_data <- read.csv("DataSet/owid-co2-data.csv")
server <- function(input,output){
output$methane_plot <- renderPlot({
plot_data <- climate_change_data
climate_chage <- climate_change_data%>%
select(year,methane)
methane_plot <- ggplot(climate_chage)%>%
geom_col(mapping = aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
})
}
ggplot(climate_chage)%>%
geom_col(mapping = aes(x = year, y = black_jail_pop, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas throughout the years"
)
climate_change_data <- read.csv("DataSet/owid-co2-data.csv")
View(climate_change_data)
runApp()
shiny::runApp()
library(RColorBrewer)
display.brewer.all()
climate_change_data <- read.csv("DataSet/owid-co2-data.csv")
server <- function(input,output){
output$methane_plot <- renderPlot({
plot_data <- climate_change_data
climate_chage <- climate_change_data %>%
select(year,methane)
methane_plot <- ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
methane_plot
})
output$nitrous_oxide_plot <- renderPlot({
filter <- climate_change_data %>%
select(year, nitrous_oxide)
nitrous_oxide_plot <- ggplot(filter) +
geom_col(aes(x = year, y = nitrous_oxide, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
nitrous_oxide_plot
})
runApp()
runApp()
runApp()
climate_change_data %>%
select(year,methane)
methane_plot <- ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
climate_chage <- climate_change_data %>%
select(year,methane)
methane_plot <- ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
ggplot(climate_chage) +
geom_col(aes(x = year, y = methane, fill = year)) +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change methane gas and its role in carbon-dixodide "
)
runApp()
filter <- climate_change_data %>%
select(year, nitrous_oxide)
nitrous_oxide_plot <- ggplot(filter) +
geom_col(aes(x = year, y = nitrous_oxide, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
ggplot(filter) +
geom_col(aes(x = year, y = nitrous_oxide, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
runApp()
output$energy_per_capita_plot <- renderPlot({
filter <- climate_change_data %>%
select(year, energy_per_capita)
energy_per_capita_plot <- ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
runApp()
runApp()
filter <- climate_change_data %>%
select(year, energy_per_capita)
energy_per_capita_plot <- ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
ggplot(filter) +
geom_col(aes(x = year, y = energy_per_capita, fill = year)) +
scale_fill_distiller(palette = "Accent") +
labs(
x = "Year", y = "Total number of methan gases", title =
"Climate change nitrous_oxide gas throughout the years"
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
colnames(plot_data)
runApp()
location_most_deaths <- counties %>%
filter(deaths == max(deaths, na.rm = T)) %>%
pull(location)
location_most_deaths
location_most_deaths <- counties %>%
filter(deaths = max(deaths, na.rm = T)) %>%
pull(location)
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct))%>%
pull(country)
read <- read.csv("DataSet/owid-co2-data.csv")
libray(tidyverse)
library(dplyr)
library(pscl)
library(tidyverse)
library(styler)
library(lintr)
library(stringr)
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct))%>%
pull(country)
gas
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct, na.rm =  T))%>%
pull(country)
gas
gas <- climate_change_data%>%
filter(co2_growth_prct == max(co2_growth_prct))%>%
pull(country, na.rm =  T)
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
read <- read.csv("data/NFLsavant_playbyplay_2020")
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
read <- read.csv("data/NFLsavant_playbyplay_2020")
library(dplyr)
library(pscl)
library(tidyverse)
library(styler)
library(lintr)
library(stringr)
library(RColorBrewer)
library(maps)
library(mapproj)
library(patchwork)
library(ggplot2)
library(RColorBrewer)
display.brewer.all()
nfl_dataset1 <- read.csv("data/NFLsavant_playbyplay_2020.csv")
features <- nrow(nfl_dataset1)
filter <- nfl_dataset1%>%
group_by(PenaltyYards)%>%
filter(PenaltyYards == min(PenaltyYards, na.rm = T))%>%
pull(PenaltyType)
##nfl_wins <- nfl_dataset2 %>%
## select(PlayType, IsInterception)
##nfl_second_plot <-
##  ggplot(nfl_wins) +
##  geom_scatt(aes (x = PlayType, y = IsInterception, fill = IsInterception)) + scale_fill_distiller(palette = "Accent") +
## labs(x = "Playtype", y = "Interceptions", title = "NFl DatSet By Abdiwahid, Evan, Charles")
##
## Filter by interceptions and passtype and sum that all up
nfl_data_abdiwahid <- nfl_dataset1 %>%
group_by(PassType)%>%
summarise(interception = sum(IsInterception, na.rm =  T))%>%
filter(interception != 0)
## @ABdiwahid - create a ggplot of the pass types and their interception rating
abdiwahid_plot <- ggplot(nfl_data_abdiwahid) +
geom_col(mapping = aes (x = PassType, y = interception))  +
coord_flip()+
labs(x = "PassType", y = "interception", title = "Types of pass and the probabililty of it getting
intercepted")
blank_theme <- theme_bw() +
theme(
axis.line = element_blank(), # remove axis lines
axis.text = element_blank(), # remove axis labels
axis.ticks = element_blank(), # remove axis ticks
axis.title = element_blank(), # remove axis titles
plot.background = element_blank(), # remove gray background
panel.grid.major = element_blank(), # remove major grid lines
panel.grid.minor = element_blank(), # remove minor grid lines
panel.border = element_blank() # remove border around plot
)
read <- read.csv("data/NFLsavant_playbyplay_2020.csv")
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
read <- read.csv("data/NFLsavant_playbyplay_2020.csv")
read <- read.csv("data/NFLsavant_playbyplay_2020.csv")
read
runApp()
runApp()
runApp()
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
runApp()
runApp()
setwd("C:/Users/abdiw/Desktop/info_201/project-evanbod/App")
setwd("~/")
runApp('C:/Users/abdiw/Desktop/info_201/project-evanbod/App')
first_ten <- (10:20)
first_ten
next_ten <- seq(21:30)
next_ten
allnumber <- (first_ten, next_ten)
allnumber <- lapply(first_ten, first_ten)
print("Hello world")
num_1 <- 4
num_2 <- 5
num_1 / (201^0.5)
num_1 / (sqrt(201))
num_1 <- 4
num_2 <- 48
num_3 <- num_1/(201^0.5)
num_3
lyric <- "I like to eat apples and bananas"
intro <- substr(lyric, 0, 13)
fruits <- substr(lyric, 15, 32)
fruits_e <- gsub("a", "ee", fruits, ignore.case = FALSE, perl = FALSE, fixed = FALSE, useBytes = FALSE)
fruits_e
shiny::runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
runApp('C:/Users/abdiw/Desktop/info_201/New_ShinyApp_Update')
black_jail_pop <- county_level_data%>%
group_by(year)%>%
summarise(black_jail_pop = sum(black_jail_pop, na.rm = T))%>%
filter(year == "2018")%>%
pull(black_jail_pop)
black_jail_pop
max_jailing <- county_level_data%>%
select(state, black_jail_pop)%>%
filter(black_jail_pop == max(black_jail_pop, na.rm = T))%>%
pull(state)
max_jailing
filter <- county_level_data %>%
select(black_jail_pop, year)
abdiwahids_plot <- ggplot(filter) +
geom_col(aes ( x = year, y = black_jail_pop, fill = year)) + scale_fill_distiller(palette = "Accent") +
labs(x = "Year", y = "Total number of Black people jailed", title =
"The number of black people that were jailed")
ggplot(filter) +
geom_col(aes ( x = year, y = black_jail_pop, fill = year)) + scale_fill_distiller(palette = "Accent") +
labs(x = "Year", y = "Total number of Black people jailed", title =
"The number of black people that were jailed")
total_lowest_year_black_jailing <- county_level_data%>%
filter(black_jail_pop == min(black_jail_pop, na.rm = T))%>%
distinct(year)%>%
nrow()
total_lowest_year_black_jailing
total_lowest_year_black_jailing <- county_level_data%>%
group_by(year)%>%
filter(black_jail_pop == min(black_jail_pop, na.rm = T))%>%
distinct(year)%>%
nrow()
total_lowest_year_black_jailing
plot(num_calories)
num_calories <- (starbucks$Calories)   ## <---- this returns a vector
starbucks <- read.csv("Data/StarbucksData.csv", stringsAsFactors = FALSE)
setwd("C:/Users/abdiw/Downloads/SectionAA_Lab_Demos/Lab_2_Demos")
starbucks <- read.csv("Data/StarbucksData.csv", stringsAsFactors = FALSE)
num_calories <- (starbucks$Calories)   ## <---- this returns a vector
plot(num_calories)
plot(num_calories, x = "Total", y = 'number of calories')
boxplot(num_calories)
boxplot(log(num_calories))
library(stringr)
has_more_As <- function(StringA, StringB){
allLower_A <- str_to_lower(StringA)
allLower_B <- str_to_lower(StringB)
countA <- str_count(allLower_A, "a")
countB <- str_count(allLower_B, "a")
if(countA == 0 && countB == 0){
return(paste("Neither string Contains Letter A's"))
}else if(countA > countB){
return(paste(StringA,  "contains more A's than String B"))
}else{
return(paste(StringB, "Contains more letter a's than", StringA))
}
}
has_more_As("Abdiwahid", "zzzzzzz")
has_more_As(a, aaaaaaaaaaaaaa)
has_more_As("a", "aaaaaaaaaaaaaa")
has_more_As <- function(StringA, StringB){
allLower_A <- str_to_lower(StringA)
allLower_B <- str_to_lower(StringB)
countA <- str_count(allLower_A, "a")
countB <- str_count(allLower_B, "a")
if(countA == 0 && countB == 0){
return(paste("Neither string Contains Letter A's"))
}else if(countA > countB){
return(paste("The String", StringA,  "contains more A's than String B"))
}else{
return(paste("The String:", StringB, "Contains more letter a's than", StringA))
}
}
has_more_As("a", "aaaaaaaaaaaaaa")
has_more_As <- function(StringA, StringB){
allLower_A <- str_to_lower(StringA)
allLower_B <- str_to_lower(StringB)
countA <- str_count(allLower_A, "a")
countB <- str_count(allLower_B, "a")
if(countA == 0 && countB == 0){
return(paste("Neither string Contains Letter A's"))
}else if(countA > countB){
return(paste("The String", StringA,  "contains more A's than String B"))
}else{
return(paste("The String:", StringB, "Contains more letter a's than", "the String", StringA))
}
}
has_more_As("a", "aaaaaaaaaaaaaa")
has_more_As("AAAAaABABABABABABABA", "Amamamamamamamamam")
has_more_As("eyeyeyeyeyeyeyey", "dhdhdhdhdhdhdhdhdh")
View(starbucks)
getResult <- extract[extract > 10.0]
getResult <- extract[[extract > 10.0]]
getResult
getResult <- extract[[extract > '10.0']]
getResult <- extract[extract > '10.0']
getResult <- extract[extract > 10]
extract <- starbucks$Fat..g.
getResult <- starbucks[extract > 10]
getResult <- extract[extract > 10]
getResult <- extract[extract > 10]
getResult
extract <- starbucks$Fat..g.
View(getResult)
View(as.data.frame(getResult))
has_more_As <- function(String_A, String_B){
turnA_ToLower <- str_to_lower(String_A)
turnB_ToLower <- str_to_lower(String_B)
getA_Occurences <- str_count(turnA_ToLower, "a")
getB_Occurences <- str_count(turnB_ToLower, "a")
if(getA_Occurences > getB_Occurences ){
return(paste("The String:", String_A, "contains more A's", "than the String:", String_B))
}else if(getA_Occurences < getB_Occurences){
return(paste("The String:", String_B, "contains more A's", "than the String:", String_A))
}else if(getA_Occurences == getB_Occurences){
return(paste("Both Strings contain the same number of A's"))
}else{
return(paste("Neither String has a letter A"))
}
}
test1 <- has_more_As("All", "All")
test1
test2 <- has_more_As("ababababababababababab", "llllllllll") # <-----()
test2
test3 <- has_more_As("NOOOOOOOOO", "NOOOOOOOO") #<---("Returned that none of the strings as A's)
test3
Too_Much_Fat <- nrow(as.data.frame(getResult, na.rm = T))
Too_Much_Fat
Too_Much_Fat <- nrow(as.data.frame(getResult, na.rm = T))
